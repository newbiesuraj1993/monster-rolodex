{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHjBC,G,MAAW,SAAAR,GACpB,OAAQ,sBAAKC,UAAW,YAAhB,cACJD,EAAMS,SAASC,KAAK,SAAAN,GAAO,OAAI,cAAC,EAAD,CAAMA,QAASA,YCDzCO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACjB,uBAAQZ,UAAW,SAASa,KAAK,SAASF,YAAcA,EAAaG,SAAUF,MCkCxEG,E,kDAjCf,aAAc,IAAD,8BACX,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACXb,SAAW,CAAC,CAACH,KAAK,gBAAgB,CAACA,KAAK,QAAQ,CAACA,KAAK,WACtDa,YAAa,IAJJ,E,qDAQb,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAWkB,S,oBAS9H,WACE,MAAgCC,KAAKN,MAA9Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YAEXU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWW,YAAa,8BAA8BC,aAAgBe,KAAKf,eAC3E,cAAC,EAAD,CAAUJ,SAAUoB,W,GA7BVI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9b629f72.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => {\r\n    return(\r\n        <div className='card-container'>\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n            <h1>{props.monster.name}</h1>\r\n            <p>{props.monster.email}</p>\r\n        </div>)\r\n\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\n\r\nexport const Cardlist = props => {\r\n    return (<div className ='card-list'> {\r\n        props.monsters.map( monster => <Card monster={monster}/> )\r\n      }\r\n  </div>)\r\n}","import React from 'react'\r\n\r\nimport './search-box.styles.css'\r\n\r\n//instead of using return for a function call, this is direct way of returning thr jsx component\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n        <input  className ='search' type='search' placeholder= {placeholder} onChange={handleChange}/>\r\n\r\n\r\n);","\r\nimport { Component } from 'react';\r\nimport './App.css';\r\nimport {Cardlist} from './components/card-list/card-list.component'\r\nimport {SearchBox} from './components/search-box/search-box.component'\r\n\r\nclass App extends Component {\r\n\r\nconstructor(){\r\n  super();\r\n  this.state = {\r\n    monsters : [{name:'Frankenstein'},{name:'Drac'},{name:'Zombie'}],\r\n    searchfield :''\r\n  }\r\n}\r\n\r\ncomponentDidMount(){\r\n  fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setState({monsters : users}))\r\n}\r\n\r\n//arrow helps in defining functions without bidning them explicitly to the contexts. if we dont use, we will have to bind this function inside constructor else it will throw error as\r\n//setstate is undefined. //syenthetic event is the input here\r\nhandleChange = (e) => {\r\n  this.setState({searchfield: e.target.value})\r\n}\r\n\r\n  render() {\r\n    const {monsters, searchfield} = this.state;\r\n\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchfield.toLowerCase()));\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1> Monsters Rolodex </h1>\r\n        <SearchBox placeholder ='search for your fav monster' handleChange = {this.handleChange}/>\r\n        <Cardlist monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}